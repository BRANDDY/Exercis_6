/* autogenerated by Processing revision 1276 on 2021-11-23 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import gab.opencv.*;
import java.awt.Rectangle;
import processing.video.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Exercis_6 extends PApplet {

PVector cameraPos;//中间的蓝色东西
PVector targetPos;
PVector facePos;

int targetSize;

 public void setup() {
  /* size commented out by preprocessor */;
  cameraPos = new PVector(width, 0, 100);
  setTarget();
  setupCapture();
  setupOpenCV();
}

 public void draw() {
  scale(2);
  background(0);
  updateOpenCV();
  image(pg, 0, 0);
  setFace();
}

 public void setFace(){
  noFill();
  stroke(0, 255, 0);
  strokeWeight(3);
    
  for (int i = 0; i < faces.length; i++) {
    Rectangle face = faces[i];
    if (i == 0) {
      cameraPos.x = face.x - width / 2;   
      facePos=new PVector(face.x,face.y);
    }
    rect(face.x, face.y, face.width, face.height);
    //println(face.x);
  }
  
  updateTarget();  
  pushMatrix();   
  camera(cameraPos.x, cameraPos.y, cameraPos.z, 0, 0, 0, 0, -1, 0);
  noStroke();
  popMatrix();
  eatEven();
}

 public void eatEven(){
  if (facePos.x-targetPos.x>-10&&facePos.x-targetPos.x<10&&facePos.y-targetPos.y>-10&&facePos.y-targetPos.y<10){
    setTarget();
  }
}

 public void setTarget() {
  targetSize=PApplet.parseInt (random(20,60));
  targetPos = new PVector(PApplet.parseInt(random(20, 200)),PApplet.parseInt(random(20, 200)),0);
  println(targetPos);
}

 public void updateTarget(){
  fill(0xFFC14444);
  noStroke();
  rect(targetPos.x,targetPos.y,targetSize,targetSize);
}



OpenCV openCV;
Rectangle[] faces;
boolean armUpdateOpenCV = false;

 public void setupOpenCV() {
  openCV = new OpenCV(this, videoWidth, videoHeight);
  openCV.loadCascade(OpenCV.CASCADE_FRONTALFACE); 
  faces = new Rectangle[0];
}

 public void updateOpenCV() {
  if (armUpdateOpenCV) {
    openCV.loadImage(capture);
    
    pg.beginDraw();
    pg.image(capture, 0, 0);
    pg.filter(GRAY);
    pg.endDraw();
    
    faces = openCV.detect();
    
    armUpdateOpenCV = false;
  }
}


Capture capture;
int videoWidth = 320;
int videoHeight = 240;
int videoFps = 30;
PGraphics pg;//自然消失，贴摄像头的图，为什么是PG格式

 public void setupCapture() {
  /*String[] cameraNames = capture.list();
  for (String cameraName : cameraNames) {
    println(cameraName);
  }*/
  capture = new Capture(this, videoWidth ,videoHeight,"pipeline:autovideosrc");    
  pg = createGraphics(videoWidth, videoHeight, P3D);
  
  capture.start();
}

 public void captureEvent(Capture c) {
  c.read();
  armUpdateOpenCV = true;
}


  public void settings() { size(640, 480, P3D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Exercis_6" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
